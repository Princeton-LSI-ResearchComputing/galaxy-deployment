---
- name: test connection
  ping:

- name: create error-documents folder
  file: path={{ GALAXY_HOME }}/../www/html/error-documents/ state=directory

- name: error-documents
  copy: src="error-documents" dest={{ GALAXY_HOME }}/../www/html/

- name: set galaxy user hg config
  copy: src="hg_config/.hgrc" dest="~"

- stat: path="{{ GALAXY_HOME }}/.hg"
  register: hg

- name: pop galaxy patches
  command: hg qpop -a
  args:
    chdir: "{{ GALAXY_HOME }}"
  environment:
    PATH: /usr/local/bin:{{ ansible_env.PATH }}
  when: hg.stat.isdir is defined and hg.stat.isdir == true

- include: backup_loc_files.yaml

- name: Get current Galaxy changeset
  command: hg parents --template '{latesttag}' chdir={{ GALAXY_HOME }}
  environment:
    PATH: /usr/local/bin:{{ ansible_env.PATH }}
  register: current_changeset_id
  changed_when: False

- name: Report current Galaxy changeset
  debug:
    msg: "Current changeset of {{ GALAXY_HOME }} {{ current_changeset_id.stdout }} does not match playbook version {{ hg_revision }}"
  changed_when: True
  when: current_changeset_id.stdout != hg_revision

- name: checkout galaxy
  hg: repo=https://bitbucket.org/galaxy/galaxy-dist#stable
      dest={{ GALAXY_HOME }}
      revision={{ hg_revision }}
  environment:
    PATH: /usr/local/bin:{{ ansible_env.PATH }}
  #notify:
  #  - restart galaxy

- name: checkout galaxy patches
  hg: repo=https://bitbucket.org/princeton_genomics/galaxy_patches
      dest={{ GALAXY_HOME }}/.hg/patches
  environment:
    PATH: /usr/local/bin:{{ ansible_env.PATH }}
  #notify:
  #  - restart galaxy

- name: apply galaxy patches
  command: hg qpush -a
  args:
    chdir: "{{ GALAXY_HOME }}"
  environment:
    PATH: /usr/local/bin:{{ ansible_env.PATH }}

- name: add legacy tools (not from toolshed)
  copy: src="galaxy_legacy_tools/tools/" dest="{{ GALAXY_HOME }}/tools/" backup=yes

- name: add legacy tool test-data
  copy: src="galaxy_legacy_tools/test-data/" dest="{{ GALAXY_HOME }}/test-data/" backup=yes

- name: add legacy jars
  copy: src="galaxy_legacy_tools/tool-data/" dest="{{ GALAXY_HOME }}/tool-data/" backup=yes

- name: universe_wsgi.ini
  template: src=universe_wsgi.ini.j2 dest={{ GALAXY_HOME }}/universe_wsgi.ini backup=yes

- name: job_conf.xml
  template: src=job_conf.xml.j2 dest={{ GALAXY_HOME }}/job_conf.xml backup=yes

- name: reports_wsgi.ini
  template: src=reports_wsgi.ini.j2 dest={{ GALAXY_HOME }}/reports_wsgi.ini backup=yes

- name: tool_conf.xml
  template: src=tool_conf.xml.j2 dest={{ GALAXY_HOME }}/tool_conf.xml backup=yes

- name: welcome.html
  template: src=welcome.html.j2 dest={{ GALAXY_HOME }}/static/welcome.html backup=yes

- include: tool-dependencies.yaml

- include: crontab.yaml

- include: custom_scripts.yaml

- name: Get current Galaxy DB version
  command: "{{ galaxy_venv_dir }}/bin/python {{ GALAXY_HOME }}/scripts/manage_db.py db_version chdir={{ GALAXY_HOME }}"
  register: current_db_version
  changed_when: False

- name: Get maximum Galaxy DB version
  command: "{{ galaxy_venv_dir }}/bin/python {{ GALAXY_HOME }}/scripts/manage_db.py version chdir={{ GALAXY_HOME }}"
  register: max_db_version
  changed_when: False

- include: backup_database.yaml
  when: current_db_version.stdout != max_db_version.stdout

- name: Upgrade Galaxy DB
  command: "{{ galaxy_venv_dir }}/bin/python {{ GALAXY_HOME }}/scripts/manage_db.py upgrade chdir={{ GALAXY_HOME }}"
  when: current_db_version.stdout != max_db_version.stdout
